[gd_scene load_steps=4 format=2]

[ext_resource path="res://Assets/builds_new/neutral/unit_bld_mine.png" type="Texture" id=1]

[sub_resource type="GDScript" id=2]
script/source = "
extends \"res://Scripts/Unit/npc_player_control.gd\"



onready var _url_data:String = \"\"
onready var _data:Dictionary = Dictionary()
var _name:String
var npc_god = false

func _ready():
	set_process(false)
	set_process_input(false)


sync func init(inventory:Control, name:String, data:Dictionary, spawn_position:Vector2, url_data:String = \"\"):
#	rpc(\"load_data\", inventory, name, \"Bag\", data)
	_name = name
	_url_data = url_data
	_data = inventory.load_data(name, \"Fortress\")
	position = spawn_position


#func load_data(inventory:Control, filename:String, item_list_label:String = \"Bag\", data_player:Dictionary = Dictionary()) -> Dictionary:
##	if(item_list_label == \"Bag\"):
#	url_data = \"res://Database//data_bag_\" + filename + \".json\"
#	data = Global_DataParser.load_data(url_data)
#	if ((data.empty() && item_list_label == \"Bag\" && !data_player.empty())):
#		Global_DataParser.write_data(url_data, data_player)
#		data = data_player
#	return data


func reload_data_by_inventory(inventory:Control) -> Dictionary:
	_data = inventory.load_data(_name, \"Fortress\")
	return _data


func is_data_empty_by_inventory(inventory:Control) -> bool:
	return inventory.is_inventory_empty_by_data(_data)


func rpc_destroy_self():
#	return 1
	rpc(\"destroy_self\")


sync func destroy_self() -> void:
	for child in get_children():
		if child.has_method('queue_free'):
			child.queue_free()
	Global_DataParser.delete_file(_url_data)


func _on_Timer_timeout():
#	print(\"Fortress Life End!!!\") # Replace with function body.
	rpc_destroy_self()
	get_parent().remove_child(self)
	queue_free()


func _on_TimerLife_timeout():
	print(\"Fortress Life End\") # Replace with function body.
	rpc_destroy_self()
	get_parent().remove_child(self)
	queue_free()
	
func get_data():
	var  _new_data = get_data_all()
	_new_data[\"positionX\"] = self.position.x
	_new_data[\"positionY\"] = self.position.y		

	_new_data[\"nickname\"] = \"Village_\" + self.name
	_new_data[\"whoiam\"] =\"res://Scenes/Build/HomeHobbit.tscn\"	
	return _new_data
func set_data(_new_data):
	set_data_all(_new_data)
func reduce_hp(val):
	if self.hp > 0:
		self.hp -= val
#		print(\"Healt -= %s\" % val)
#		print(hp)
	if self.hp > 0:
		update_hp()
	if self.hp <= 0:
#		die1()
		return false
	return true
"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 76, 77.5 )

[node name="Fortress" type="KinematicBody2D"]
script = SubResource( 2 )

[node name="Area2D" type="Area2D" parent="." groups=["build_repare", "fortress"]]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2( 76, 79.5 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="Area2D"]
scale = Vector2( 4, 4 )
texture = ExtResource( 1 )
centered = false

[node name="Timer" type="Timer" parent="."]
wait_time = 1800.0
autostart = true

[node name="TimerLife" type="Timer" parent="."]

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
[connection signal="timeout" from="TimerLife" to="." method="_on_TimerLife_timeout"]
